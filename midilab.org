* os
list sound cards
#+BEGIN_SRC sh :results output
cat /proc/asound/cards
#+END_SRC

#+RESULTS:
:  0 [MID            ]: HDA-Intel - HDA Intel MID
:                       HDA Intel MID at 0xf2520000 irq 29
:  1 [mkII           ]: USB-Audio - Arturia MiniLab mkII
:                       Arturia Arturia MiniLab mkII at usb-0000:00:1d.0-1.2, full speed


取决于具体的软件源，对我的 debian 来说，这个包比较重要，
#+BEGIN_SRC sh
sudo apt-get install alsa-utils
#+END_SRC
这之后，aconnect, aplay，amidi 等可以用了。
#+BEGIN_SRC sh :results output
which amidi aplay aconnect
#+END_SRC

#+BEGIN_SRC sh :results output
aconnect -o
#+END_SRC
#+RESULTS:
: client 14: 'Midi Through' [type=kernel]
:     0 'Midi Through Port-0'
: client 20: 'Arturia MiniLab mkII' [type=kernel,card=1]
:     0 'Arturia MiniLab mkII MIDI 1'

play out a wav file.
#+BEGIN_SRC sh
aplay test.wav
#+END_SRC

#+RESULTS:

amidi :read from/write to ALSA rawmidi ports.
#+BEGIN_SRC sh :results output
amidi -l # list devices
#+END_SRC

#+RESULTS:
: Dir Device    Name
: IO  hw:1,0,0  Arturia MiniLab mkII MIDI 1

send a manually entered hex syntex command from stdin 
#+BEGIN_SRC sh
amidi -p hw:1,0,0 -S "F0 00 20 33 00 00 01 07 0F F0"
#+END_SRC

record incoming synsex data to the file Sysexdump.syx, from device 1,0,0
#+BEGIN_SRC sh :results output
amidi -p hw:1,0,0 -r Sysexdump01.syx
#+END_SRC
list-rawmidis
#+BEGIN_SRC sh :results output
amidi -L 
#+END_SRC

#+RESULTS:
#+begin_example
RawMIDI list:
default {
	type hw
	card {
		@func getenv
		vars {
			0 ALSA_RAWMIDI_CARD
			1 ALSA_CARD
		}
		default {
			@func refer
			name 'defaults.rawmidi.card'
		}
	}
	device {
		@func igetenv
		vars {
			0 ALSA_RAWMIDI_DEVICE
		}
		default {
			@func refer
			name 'defaults.rawmidi.device'
		}
	}
	hint.description 'Default raw MIDI device'
}
hw {
	@args.0 CARD
	@args.1 DEV
	@args.2 SUBDEV
	@args.CARD {
		type string
		default {
			@func getenv
			vars {
				0 ALSA_RAWMIDI_CARD
				1 ALSA_CARD
			}
			default {
				@func refer
				name 'defaults.rawmidi.card'
			}
		}
	}
	@args.DEV {
		type integer
		default {
			@func igetenv
			vars {
				0 ALSA_RAWMIDI_DEVICE
			}
			default {
				@func refer
				name 'defaults.rawmidi.device'
			}
		}
	}
	@args.SUBDEV {
		type integer
		default -1
	}
	type hw
	card $CARD
	device $DEV
	subdevice $SUBDEV
	hint {
		description 'Direct rawmidi driver device'
		device $DEV
	}
}
virtual {
	@args.0 MERGE
	@args.MERGE {
		type string
		default 1
	}
	type virtual
	merge $MERGE
}
#+end_example

creates a virtual rawmidi port and prints all data sent to this port
#+BEGIN_SRC sh :results output
amidi -p virtual -d 
#+END_SRC

#+RESULTS:


#+BEGIN_SRC sh
cat /usr/share/alsa/alsa.conf
#+END_SRC

#+RESULTS:
生成测试midi文件：
#+BEGIN_SRC sh :results output 
sox -b 16 -n test.wav rate 44100 channels 2 synth 1 sine 440 gain -1

#+END_SRC

#+RESULTS:

* synth :if sound is important
fluidsynth is a software music synthesizer that reads midi input events either from a MIDI piano keyboard or from a software application (e.g. MIDI sequencer) and then generates in realtime a musical audio output that corresponds to all the midi notes being played.

sound-font, ingredients to mix in:
#+BEGIN_SRC sh
ls -hla /usr/share/sounds/sf2/FluidR3_GM.sf2
#+END_SRC

#+RESULTS:
: -rw-r--r-- 1 root root 142M Feb 24  2008 /usr/share/sounds/sf2/FluidR3_GM.sf2

The easiest way test that fluidsynth is working correctly and to hear some MIDI music playing is to use the command line and to pass a Sound Font file and the MIDI file as the parameter. For example the following command line tests that fluidsynth is working on Ubuntu Linux.
#+BEGIN_SRC sh
fluidsynth /usr/share/sounds/sf2/FluidR3_GM.sf2 mymusicfile.mid

#+END_SRC

Normally, you would not pass a MIDI file to fluidsynth, but instead use another application to pass MIDI events to fluidsynth. In this case, you would start fluidsynth the following parameters.
#+BEGIN_SRC sh
fluidsynth /usr/share/sounds/sf2/FluidR3_GM.sf2

#+END_SRC
OR:
#+BEGIN_SRC sh :results output
fluidsynth --server --audio-driver=alsa -o audio.alsa.device=hw:0 /usr/share/sounds/sf2/FluidR3_GM.sf2
#+END_SRC

* read midi port and translate to ...
https://superuser.com/questions/1170136/translating-midi-input-into-computer-keystrokes-on-linux
aseqdump -l = aconnect -io
#+BEGIN_SRC sh :results output
aseqdump -l
#+END_SRC

#+RESULTS:
| Port | Client  | name     | Port | name    |         |      |      |   |
|  0:0 | System  | Timer    |      |         |         |      |      |   |
|  0:1 | System  | Announce |      |         |         |      |      |   |
| 14:0 | Midi    | Through  | Midi | Through | Port-0  |      |      |   |
| 20:0 | Arturia | MiniLab  | mkII | Arturia | MiniLab | mkII | MIDI | 1 |

* algorithmic composition
+ https://quod.lib.umich.edu/s/spobooks/bbv9810.0001.001/--algorithmic-composition-a-gentle-introduction-to-music
+ https://ccrma.stanford.edu/software/clm/compmus/clm-tutorials/toc.html
* Notes
** alsa & jack
 JACK is a better choice since it offers low-latency and the ability to synchronize multiple audio sources. You can think of JACK as an improved pulseaudio. JACK is (as the marketing types might say) "designed to meet the demanding needs of audio professionals."

* references
+ https://alsa.opensrc.org/Amidi
+ 
